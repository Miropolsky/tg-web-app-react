import { useCallback } from "react";
import { useFormState } from "../../hooks/useFormState";
import { useFormValidation } from "../../hooks/useFormValidation";
import { useTelegramButton } from "../../hooks/useTelegramButton";
import type { FormData } from "../../types/form";
import "./Form.css";
import { FormField } from "./FormField";
import { FormSelect } from "./FormSelect";

const initialForm: FormData = {
  name: "",
  email: "",
  phone: "",
  address: "",
  type: "",
};

const organizationTypes = [
  { value: "–Æ—Ä. –ª–∏—Ü–æ", label: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ" },
  { value: "–ò–ü", label: "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å" },
  { value: "–§–∏–∑. –ª–∏—Ü–æ", label: "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ" },
];

export const Form = () => {
  const { form, errors, updateField, isFormValid } =
    useFormValidation(initialForm);
  const { formState, setSuccess } = useFormState();

  const onSubmit = useCallback(() => {
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    setSuccess(true);
  }, [setSuccess]);

  useTelegramButton({
    form,
    isFormValid: isFormValid(),
    isSubmitting: formState.isSubmitting,
    isSuccess: formState.isSuccess,
    onSubmit,
  });

  const handleChange = useCallback(
    (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
      const { name, value } = e.target;
      updateField(name as keyof FormData, value);
    },
    [updateField]
  );

  const handleFormSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ useTelegramButton
  };

  return (
    <div className="form-container">
      <form className="form" onSubmit={handleFormSubmit}>
        <h3 className="form-title">–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ</h3>

        <FormField
          name="name"
          label="–ò–º—è"
          placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
          value={form.name}
          error={errors.name}
          required
          onChange={handleChange}
        />

        <FormField
          name="email"
          label="Email"
          type="email"
          placeholder="example@email.com"
          value={form.email}
          error={errors.email}
          required
          onChange={handleChange}
        />

        <FormField
          name="phone"
          label="–¢–µ–ª–µ—Ñ–æ–Ω"
          type="tel"
          placeholder="+7 (999) 123-45-67"
          value={form.phone}
          error={errors.phone}
          required
          onChange={handleChange}
        />

        <FormField
          name="address"
          label="–ê–¥—Ä–µ—Å"
          placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å"
          value={form.address}
          onChange={handleChange}
        />

        <FormSelect
          name="type"
          label="–¢–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"
          placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø"
          value={form.type}
          options={organizationTypes}
          onChange={handleChange}
        />

        {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ Telegram MainButton */}
        <div className="form-info">
          <p className="form-info-text">
            üì± –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É" –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
          </p>
        </div>
      </form>
    </div>
  );
};
